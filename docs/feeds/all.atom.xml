<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Matthew Kudija</title><link href="http://matthewkudija.com/blog/" rel="alternate"></link><link href="http://matthewkudija.com/blog/feeds/all.atom.xml" rel="self"></link><id>http://matthewkudija.com/blog/</id><updated>2018-04-03T06:00:00-04:00</updated><entry><title>Table Filtering in HTML and JavaScript</title><link href="http://matthewkudija.com/blog/2018/04/03/filter-table/" rel="alternate"></link><published>2018-04-03T06:00:00-04:00</published><updated>2018-04-03T06:00:00-04:00</updated><author><name>Matthew Kudija</name></author><id>tag:matthewkudija.com,2018-04-03:blog/2018/04/03/filter-table/</id><summary type="html">

&lt;p&gt;&lt;img alt src="http://matthewkudija.com/blog/images/filter-table-1.gif"&gt;&lt;/p&gt;
&lt;p&gt;GitHub pages makes it easy to share information: just send the URL instead of emailing a file attachment. When I wanted to share the contents of an Excel file this was a natural platform, but with over 1,000 rows of data I needed a way to filter the table on the webpage.&lt;/p&gt;
&lt;p&gt;With my knowledge at the time limited to some basic HTML and very little JavaScript, this is an exercise in hacking together a solution. Keep reading to see how I implemented a solution using the &lt;a href="http://koalyptus.github.io/TableFilter/"&gt;TableFilter&lt;/a&gt; JavaScript library. &lt;/p&gt;
</summary><category term="html"></category><category term="javascript"></category><category term="web"></category><category term="TableFilter"></category></entry><entry><title>xlwings: Use Python and Excel to Calculate Your Mortgage</title><link href="http://matthewkudija.com/blog/2018/03/25/xlwings-mortgage/" rel="alternate"></link><published>2018-03-25T06:00:00-04:00</published><updated>2018-03-25T06:00:00-04:00</updated><author><name>Matthew Kudija</name></author><id>tag:matthewkudija.com,2018-03-25:blog/2018/03/25/xlwings-mortgage/</id><summary type="html">

&lt;p&gt;&lt;img alt src="http://matthewkudija.com/blog/images/xlwings-mortgage-1.gif"&gt;&lt;/p&gt;
&lt;p&gt;The Python &lt;a href="https://www.xlwings.org/"&gt;xlwings&lt;/a&gt; library provides easy interaction between Python and a Microsoft Excel workbook. In this example, I'll demonstrate using Excel as a wrapper around a Python function, with xlwings providing the link between the two.&lt;/p&gt;
</summary><category term="python"></category><category term="pandas"></category><category term="xlwings"></category><category term="excel"></category></entry><entry><title>Automation Using Makefiles</title><link href="http://matthewkudija.com/blog/2018/03/15/makefiles/" rel="alternate"></link><published>2018-03-15T06:00:00-04:00</published><updated>2018-03-15T06:00:00-04:00</updated><author><name>Matthew Kudija</name></author><id>tag:matthewkudija.com,2018-03-15:blog/2018/03/15/makefiles/</id><summary type="html">

&lt;p&gt;Makefiles provide an easy way to group multiple terminal commands into a single command using &lt;code&gt;make &amp;lt;command&amp;gt;&lt;/code&gt;. This gives a brief overview with just enough information to write your first Makefile.&lt;/p&gt;
</summary><category term="python"></category><category term="makefile"></category><category term="make"></category></entry><entry><title>Carpet Plots</title><link href="http://matthewkudija.com/blog/2018/02/14/carpet-plots/" rel="alternate"></link><published>2018-02-14T06:00:00-05:00</published><updated>2018-02-14T06:00:00-05:00</updated><author><name>Matthew Kudija</name></author><id>tag:matthewkudija.com,2018-02-14:blog/2018/02/14/carpet-plots/</id><summary type="html">&lt;p&gt;&lt;img alt src="http://matthewkudija.com/blog/images/carpet.jpeg"&gt;&lt;/p&gt;
&lt;style type="text/css"&gt;/*!
*
* IPython notebook
*
*/
/* CSS font colors for translated ANSI colors. */
.ansibold {
  font-weight: bold;
}
/* use dark versions for foreground, to improve visibility */
.ansiblack {
  color: black;
}
.ansired {
  color: darkred;
}
.ansigreen {
  color: darkgreen;
}
.ansiyellow {
  color: #c4a000;
}
.ansiblue {
  color: darkblue;
}
.ansipurple {
  color: darkviolet;
}
.ansicyan {
  color: steelblue;
}
.ansigray {
  color: gray;
}
/* and light for background, for the â€¦&lt;/style&gt;</summary><category term="carpet"></category><category term="plotly"></category><category term="pandas"></category><category term="pd.melt()"></category><category term="matplotlib"></category><category term="3Dplot"></category></entry><entry><title>Where I Travelled in 2016 with Basemap</title><link href="http://matthewkudija.com/blog/2016/12/17/travel-map/" rel="alternate"></link><published>2016-12-17T06:00:00-05:00</published><updated>2016-12-17T06:00:00-05:00</updated><author><name>Matthew Kudija</name></author><id>tag:matthewkudija.com,2016-12-17:blog/2016/12/17/travel-map/</id><summary type="html">

&lt;p&gt;&lt;img alt src="http://matthewkudija.com/blog/images/2016_travel.png"&gt;&lt;/p&gt;
&lt;p&gt;For me 2016 was quite a year for travel: a cross-country road trip, visiting family in Alabama, and a trip to Europe for work. In this example I'll show how to illustrate a year of travel using Python's Basemap library.&lt;/p&gt;
</summary><category term="basemap"></category><category term="map"></category><category term="python"></category><category term="matplotlib"></category></entry></feed>